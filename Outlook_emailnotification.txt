import csv
import subprocess
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
import time
import schedule
from email import encoders
from apscheduler.schedulers.blocking import BlockingScheduler
import ipaddress
import pandas as pd



#reading server details from csv file
def read_servers_from_csv(file_path):
    servers = []
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        next(reader)  # Skip header row
        for row in reader:
            if len(row) >= 2:  # Ensure there are at least two values in the row
                servers.append(row)
    return servers

def ping_server(IP_Address, timeout=5):
    if '::' in IP_Address:
        IP_Address = IP_Address.split('::')[0]
    # Ping the IP address to check the server's status
    try:
        # Run the ping command
        result = subprocess.run(['ping', '-n', '1', IP_Address], capture_output=True, text=True, timeout=timeout)
        
        # Check the return code to determine if the ping was successful
        if result.returncode == 0:
            return True  # Server is up
        else:
            return False  # Server is down
    except subprocess.TimeoutExpired:
        return False  # Ping operation timed out

def check_server_statuses(servers):
    updated_servers = []
    for server in servers:
        server_name, IP_Address = server  # Extract server name and IP address
        if 'fe' not in IP_Address.lower():  # Filter out IPv6 addresses
            continue
        if ping_server(IP_Address):
            status = 'Up'
        else:
            status = 'Down'
        updated_servers.append([server_name, IP_Address, status])
    return updated_servers

def check_server_statuses_1(servers):
    updated_servers = []
    for server in servers:
        if len(server) >= 2:  # Check if server data contains at least two values
            server_name = server[0]  # Extract server name
            IP_Address = server[1] if len(server) >= 2 else None # Extract IP address if available
#            if ip_address and '::' not in ip_address:  # Exclude IPv6 addresses
            status = ping_server(IP_Address)
            updated_servers.append((server_name, IP_Address, status))  # Append server name, IP address, and status
        else:
            pass  # Skip adding records with invalid data
    return updated_servers

def write_to_csv(servers, output_file):
    with open(output_file, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Server', 'IP Address', 'Status'])
        writer.writerows(servers)


def attach_file(msg, file_path):
    with open(file_path, "rb") as file:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(file.read())
        encoders.encode_base64(part)
        part.add_header(
            "Content-Disposition",
            f"attachment; filename= {file_path}",
        )
        msg.attach(part)

def main():
    input_csv = r"C:\Users\*\HDWoperations.csv"
    output_csv = r"C:\Users\*\HDW_Server Status.csv"

    # Read the CSV file into a DataFrame
    df = pd.read_csv(input_csv)
    # Filter out rows containing
    df_clean = df[~df['IP Address'].str.contains('fe')]
    # Save the cleaned DataFrame to a new CSV file
    df_clean.to_csv('purged_csv_file.csv', index=False)

    # Read server information from CSV
    servers = read_servers_from_csv('purged_csv_file.csv')
    # Check server statuses
    updated_servers = check_server_statuses_1(servers)
    # Write server statuses to CSV
    write_to_csv(updated_servers, output_csv)

    #sending mail credentials
    sender_email = "_@outlook.com"
    sender_password = "***"
    receiver_email = "_@outlook.com"
    subject = "Server Status Report"
    body = "This is a server status report."


#def send_email(sender_email, sender_password, receiver_email, subject, body):
    # Setup the MIME
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = receiver_email
    message['Subject'] = subject
    message.attach(MIMEText(body, 'plain'))
    attach_file(message, output_csv)

    with smtplib.SMTP('smtp.office365.com', 587) as server:
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, receiver_email, message.as_string())
        print("Email sent successfully")

if __name__ == "__main__":
    main()

# Schedule the main function to run
schedule.every().day.at("23:54:00").do(main)

while True:
    schedule.run_pending()
    time.sleep(5)  # Sleep for 60 seconds to avoid high CPU usage

